- 修改内容

- 1.扩大扫描区域，由 5/8 改为 6/8

    修改CameraManager 类中 静态常量 和 findDesiredDimensionInRange 方法中的计算
    private static final int MAX_FRAME_WIDTH = 1440; // = 6/8 * 1920
    private static final int MAX_FRAME_HEIGHT = 810; // = 6/8 * 1080

- 2.获得合适的预览分辨率

    -1. 手机要很远才能扫描，是因为分辨率太高的原因

    -2. 获取思路：
        - 首先遍历所有的相机所支持的分辨率
        - 创建 correctSizes 的list 保存符合过滤条件的 相机分辨率
        - 当遍历结束后，去 correctSize 中间的 size
        - 修改的地方：
        - CameraConfigurationUtils.java
            - findBestPreviewSizeValue 方法
            - 因为将扫码改为固定的竖屏所以原来的判断就不合适了。 竖屏状态下 width = 1080，height = 1776
              获取到摄像头的宽高后需要对调一下，因为摄像头默认是 宽 > 高 ，判断改为如下
              boolean isCandidatePortrait = realWidth < realHeight;
              int maybeFlippedWidth = isCandidatePortrait ? realWidth : realHeight;
              int maybeFlippedHeight = isCandidatePortrait ? realHeight : realWidth;
            - MAX_ASPECT_DISTORTION 由原来的 1.5 改为 0.5
            - 添加保存过滤后的size 的集合和判断合适的size



- 3.AutoFocusManager 对焦时间改为1s

- 4.扫码界面改为竖屏后，条码的扫描需要横置手机才能扫描成功，修改如下地方，使得竖着扫码可以成功
    - 修改CameraManager中getFramingRectInPreview方法：

        //      rect.left = rect.left * cameraResolution.x / screenResolution.x;
        //      rect.right = rect.right * cameraResolution.x / screenResolution.x;
        //      rect.top = rect.top * cameraResolution.y / screenResolution.y;
        //      rect.bottom = rect.bottom * cameraResolution.y / screenResolution.y;

                rect.left = rect.left * cameraResolution.y / screenResolution.x;
                rect.right = rect.right * cameraResolution.y / screenResolution.x;
                rect.top = rect.top * cameraResolution.x / screenResolution.y;
                rect.bottom = rect.bottom * cameraResolution.x / screenResolution.y;

    - 修改DecodeHandler中的decode(byte[] data, int width, int height)方法：
        - 在 PlanarYUVLuminanceSource source = activity.getCameraManager().buildLuminanceSource(data, width, height);
        方法前添加如下代码

            byte[] rotatedData = new byte[data.length];
            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++)
                    rotatedData[x * height + height - y - 1] = data[x + y * width];
            }
            int tmp = width;
            width = height;
            height = tmp;
            data = rotatedData;

- 5.精简用不到的类和方法，主要是各种 intent 的跳转，帮助界面等

- 6.添加扫描本地照片，识别二维码
    - 根据路径读取照片，根据照片宽高 压缩bitmap
    - 将bitmap 的 RGB 编码转换为 YUV420，便于二值化算法计算
    - 解析前无需反转
    - 使用GlobalHistogramBinarizer 代替 ZXing 的 HybridBinarizer 算法解析数据生成结果

- WIFI 格式二维码
WIFI:S:天创;T:WPA;P:123456;;

- SMS 类型
smsto:10086:我猜你能收到

- Tell 类型
tel:10086

- 活动 Calendar
BEGIN:VEVENT
SUMMARY:吃火锅
DESCRIPTION:只吃肉
DTSTART:20180403T143100
LOCATION:天创
DTEND:20180403T143300
END:VEVENT